import re
import shutil
import subprocess
from pathlib import Path
from typing import Optional

from morpheus.simulation.cache import SimulationCache
from morpheus.simulation.options import SimulationOptions
import tempfile

class SimulationInstance:
    options: SimulationOptions
    tmp_path: Path
    inp_path: Path
    out_path: Path
    result: Optional[float] = None
    cache: SimulationCache

    def __init__(self, options: SimulationOptions, cache: SimulationCache) -> None:
        self.options = options
        self.cache = cache

        self.__generate_dir()

    def __generate_dir(self):
        self.tmp_path = Path(tempfile.mkdtemp(dir=self.options.tmp_path))
        self.inp_path = Path(tempfile.mktemp(dir=self.tmp_path, suffix=".xyz"))
        self.out_path = Path(tempfile.mktemp(dir=self.tmp_path, suffix=".out"))

    def __del__(self):
        shutil.rmtree(self.tmp_path)       

    def generate_inp_file(self, xyz: str):
        with open(self.inp_path, "w") as input_file:
            input_file.write(f"{xyz}\n$write\n  output file={self.out_path}")

    def extract_delta_g(self) -> float | None:
        """
        Extracts the TOTAL FREE ENERGY from a .out file generated by xtb

        :param out_file_path: The `out_file_path` parameter is expected to be a `Path` object that
        represents the file path to the xtb output file
        :type out_file_path: Path
        :return: If
        the total free energy value is successfully extracted from the file specified by `out_file_path`, it
        will return that value as a float. If there is an error during the process, it will return `None`.
        """
        try:
            with open(self.out_path, "r") as outfile:
                output = outfile.read().splitlines()
                return float(
                    re.search(
                        "(?<=TOTAL FREE ENERGY) +(-?\d+\.\d+)",
                        [x for x in output if x.__contains__("TOTAL FREE ENERGY")][0],
                    ).groups()[0]
                )
        except:
            return None

    def calculate_delta_g(self) -> float | None:
        if not Path(f"{self.inp_path.parent}/param_gfn0-xtb.txt").exists():
            subprocess.Popen(
                [
                    "ln",
                    "$HOME/bsc-thesis/xtb/param_gfn0-xtb.txt",
                    f"{self.inp_path.parent}/param_gfn0-xtb.txt",
                ],
                stdout=subprocess.DEVNULL,
                cwd=self.inp_path.parent,
            ).wait()

        params = [
                "xtb",
                self.inp_path,
                "--chrg",
                "0",
                "--uhf",
                "0",
                "--ohess",
                "--gfn",
                self.options.gfn_level.value,
                "-P",
                str(self.options.xtb_cores),
        ]
        
        if self.options.solvent:
            params += ["-alpb", self.options.solvent.value]

        subprocess.Popen(
            params,
            cwd=self.inp_path.parent,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
        ).wait()
        self.result = self.extract_delta_g()
        return self.result
